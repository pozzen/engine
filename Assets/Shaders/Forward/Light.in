// TODO: unify lights
#ifndef AMBIENT_LIGHT
struct Light
{
#ifndef DIRECTIONAL_LIGHT
	vec3 position;
	float radius;
#endif

#ifndef POINT_LIGHT
    vec3 direction;
#endif

#ifdef SPOT_LIGHT
	float cutoff;
#endif

	vec3 diffuse;
	vec3 specular;
};
uniform Light light;
#else
uniform vec3 ambient;
#endif

layout (std140) uniform Matrices
{
	mat4 viewProjection;
	vec3 cameraPosition;
};
uniform mat4 model;

#ifdef VS

layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec2 texCoord;
layout (location = 3) in vec3 color;
layout (location = 4) in vec3 tangent;
layout (location = 5) in vec3 bitangent;

out vec3 fragPosition0;
out vec2 texCoord0;
out vec3 color0;
#ifndef AMBIENT_LIGHT
out mat3 TBN;
#endif

#ifdef SHADOWS
uniform mat4 shadowViewProjection;

out vec4 shadowTexCoord0;
#endif

void main()
{
	gl_Position = viewProjection * model * vec4(position, 1.0);
	texCoord0 = texCoord;
	color0 = color;
	fragPosition0 = (model * vec4(position, 1.0)).xyz;

#ifndef AMBIENT_LIGHT
	vec3 tangent1 = (normalize(model * vec4(tangent, 0.0))).xyz;
	vec3 bitangent1 = (normalize(model * vec4(bitangent, 0.0))).xyz;
	vec3 normal1 = (normalize(model * vec4(normal, 0.0))).xyz;

	TBN = mat3(tangent1, bitangent1, normal1);
#endif

#ifdef SHADOWS
	shadowTexCoord0 = shadowViewProjection * vec4(fragPosition0, 1.0);
#endif
}

#endif

#ifdef FS

in vec3 fragPosition0;
in vec2 texCoord0;
in vec3 color0;
#ifndef AMBIENT_LIGHT
in mat3 TBN;
#endif

out vec4 color;

#include "Material.in"
uniform Material material;

#ifdef SHADOWS
uniform sampler2D shadowMap;

in vec4 shadowTexCoord0;

float calcShadow()
{
	vec3 shadowMapCoord1 = (shadowTexCoord0.xyz / shadowTexCoord0.w) * 0.5 + 0.5;

	return step(shadowMapCoord1.z - 2.0/1024.0, texture2D(shadowMap, shadowMapCoord1.xy).r);
}
#endif

vec3 calcLight()
{
	vec3 diffuseColor;
	vec3 specularColor;
	vec3 normalColor;
	vec3 ambientColor;
	getColors(material, diffuseColor, specularColor, normalColor, ambientColor);

#ifdef AMBIENT_LIGHT
	return diffuseColor * ambient + ambientColor;
#else

#ifdef DIRECTIONAL_LIGHT
	vec3 lightPos = normalize(-light.direction);
#else
	vec3 lightDir = light.position - fragPosition0;
	vec3 lightPos = normalize(lightDir);
#ifdef SPOT_LIGHT
	float factor = dot(normalize(light.direction), -lightPos);
	if (factor <= light.cutoff) return vec3(0.0);
#endif
#endif

	vec3 viewDir = normalize(cameraPosition - fragPosition0);
	vec3 normal = normalize(TBN * normalColor);
	vec3 halfwayDir = normalize(lightPos + viewDir);

	// Attenuation
	float attenuation = 1.0;
#ifndef DIRECTIONAL_LIGHT
	float denom = length(lightDir)/light.radius + 1.0;
	attenuation = 1.0 / (denom*denom);
	if (attenuation <= 0.05) return vec3(0.0);
	attenuation = max((attenuation - 0.05) / (1.0 - 0.05), 0.0);
#endif
#ifdef SPOT_LIGHT
	attenuation *= (1.0 - (1.0 - factor) / (1.0 - light.cutoff));
#endif

	// Diffuse
	float diff = max(dot(normal, lightPos), 0.0);

	// Specular
	float spec = pow(max(dot(normal, halfwayDir), 0.0), 64.0);

	// Combine results
	vec3 diffuse  = light.diffuse  * diff * diffuseColor;
	vec3 specular = light.specular * spec * specularColor;

	// Shadow
	float shadow = 1.0;
#ifdef SHADOWS
	shadow = calcShadow();
#endif

	return shadow * attenuation * (diffuse + specular);
#endif
}

void main()
{
	color = vec4(calcLight(), 1.0f);
}
#endif
